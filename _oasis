OASISFormat:            0.4
OCamlVersion:           >= 3.12
Name:                   SLAP
Version:                0.0.0
Synopsis:               Sized Linear Algebra Package
Authors:                Akinori ABE <abe@kb.ecei.tohoku.ac.jp>
Copyrights:             (C) 2013-2014 Akinori ABE <abe@kb.ecei.tohoku.ac.jp>
License:                LGPL-2.1 with OCaml linking exception
Homepage:               https://github.com/akabe/slap
Plugins:                META (0.4), StdFiles (0.4), DevFiles (0.4)
XStdFilesAUTHORS:       false
XStdFilesREADME:        false
BuildTools:             ocamlbuild,ocamldoc,cppo

PreBuildCommand:        cppo lib/slap_main.mli > lib/slap.mli && \
                        cppo lib/slap_main.ml > lib/slap.ml
PostCleanCommand:       rm -rf lib/slap.ml lib/slap.mli

Library slap
  Path:                 lib
  FindlibName:          slap
  BuildDepends:         bigarray,lacaml
  Modules:              Slap

# Documentation

Document slap
  Title:                SLAP API Documentation
  Type:                 OCamlbuild (0.4)
  BuildTools+:          ocamldoc
  InstallDir:           $docdir/api
  XOCamlbuildPath:      lib
  XOCamlbuildLibraries: slap

# Tests

Executable test
  Path:                 test
  MainIs:               test.ml
  Build$:               flag(tests)
  Install:              false
  BuildDepends:         slap,oUnit
  CompiledObject:       best

Test test
  Run$:                 flag(tests)
  Command:              $test
  WorkingDirectory:     test

##
## Examples
##

Flag examples
  Description:    Build examples
  Default:        false

Executable qr_lacaml
  Path:           examples/porting/qr_factorize
  MainIs:         qr_lacaml.ml
  Build$:         flag(examples)
  BuildDepends:   lacaml
  Install:        false
  CompiledObject: best

Executable qr_slap
  Path:           examples/porting/qr_factorize
  MainIs:         qr_slap.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable lu_lacaml
  Path:           examples/porting/lu_factorize
  MainIs:         lu_lacaml.ml
  Build$:         flag(examples)
  BuildDepends:   lacaml
  Install:        false
  CompiledObject: best

Executable lu_slap
  Path:           examples/porting/lu_factorize
  MainIs:         lu_slap.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable perceptron_lacaml
  Path:           examples/porting/perceptron
  MainIs:         perceptron_lacaml.ml
  Build$:         flag(examples)
  BuildDepends:   lacaml
  Install:        false
  CompiledObject: best

Executable perceptron_slap
  Path:           examples/porting/perceptron
  MainIs:         perceptron_slap.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable kmeans_lacaml
  Path:           examples/porting/k-means
  MainIs:         kmeans_lacaml.ml
  Build$:         flag(examples)
  BuildDepends:   lacaml
  Install:        false
  CompiledObject: best

Executable kmeans_slap
  Path:           examples/porting/k-means
  MainIs:         kmeans_slap.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable pca_lacaml
  Path:           examples/porting/pca
  MainIs:         pca_lacaml.ml
  Build$:         flag(examples)
  BuildDepends:   lacaml
  Install:        false
  CompiledObject: best

Executable pca_slap
  Path:           examples/porting/pca
  MainIs:         pca_slap.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best
