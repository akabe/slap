OASISFormat:            0.4
OCamlVersion:           >= 3.12
Name:                   SLAP
Version:                0.2.3
Synopsis:               Linear algebra library with static size checking for matrix operations
Description:            This OCaml-library is a wrapper of Lacaml, a binding of two widely used
                        linear algebra libraries BLAS and LAPACK for FORTRAN. Sized Linear Algebra
                        Library (SLAP) guarantees statically (i.e, at compile time) consistency
                        (with respect to dimensions) of most high-level matrix (and vector)
                        operations. For example, addition of two- and three-dimensional vectors causes
                        type error at compile time, and dynamic errors like exceptions do not happen.
Maintainers:            Akinori ABE <abe@sf.ecei.tohoku.ac.jp>
Authors:                Akinori ABE <abe@sf.ecei.tohoku.ac.jp>
Copyrights:             (C) 2013-2015 Akinori ABE <abe@sf.ecei.tohoku.ac.jp>
License:                LGPL-2.1 with OCaml linking exception
Homepage:               https://github.com/akabe/slap
Plugins:                META (0.4), StdFiles (0.4), DevFiles (0.4)
XStdFilesAUTHORS:       false
XStdFilesREADME:        false
BuildTools:             ocamlbuild,ocamldoc,cppo

PreBuildCommand:        ocaml gen_config.ml && \
                        cppo lib/slap.cppo.mli > lib/slap.mli && \
                        cppo lib/slap.cppo.ml > lib/slap.ml
PostCleanCommand:       rm -f lib/slap.ml lib/slap.mli lib/config.h

Library slap
  Path:                 lib
  FindlibName:          slap
  BuildDepends:         bigarray,lacaml
  Modules:              Slap
  CSources:             config.h,
                        slap_utils.h, slap_utils.c,
                        slap_vec_stubs.c,
                        slap_mat_stubs.c
  CCOpt:                -g -std=c99 -O2 -fPIC -DPIC
  CCLib:                -lblas -llapack
  # TODO: Mac OS X is untested.
  if system(macosx)
     CCOpt+:            -DEXTERNAL_EXP10
     CCLib+:            -framework Accelerate
  # TODO: MinGW is untested.
  if system(mingw)
     CCOpt+:            -DEXTERNAL_EXP10

Library slap_top
  Path:                 lib
  FindlibName:          top
  FindlibParent:        slap
  Modules:              Install_top
  XMETARequires:        slap
  XMETADescription:     Toplevel module for SLAP.
  BuildDepends:         slap,compiler-libs.toplevel

# Documentation

Document slap
  Title:                SLAP API Documentation
  Type:                 OCamlbuild (0.4)
  BuildTools+:          ocamldoc
  InstallDir:           $docdir/api
  XOCamlbuildPath:      lib
  XOCamlbuildLibraries: slap

# Tests

Executable test
  Path:                 test
  MainIs:               test.ml
  Build$:               flag(tests)
  Install:              false
  BuildDepends:         slap,oUnit
  CompiledObject:       best

Test test
  Run$:                 flag(tests)
  Command:              $test
  WorkingDirectory:     test

##
## Examples
##

Flag examples
  Description:    Build examples
  Default:        false

Executable gemv_gbmv
  Path:           examples/mult
  MainIs:         gemv_gbmv.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable symv_sbmv
  Path:           examples/mult
  MainIs:         symv_sbmv.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable jacobi
  Path:           examples/linsys
  MainIs:         jacobi.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable gesv_gbsv
  Path:           examples/linsys
  MainIs:         gesv_gbsv.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable trsv_tpsv
  Path:           examples/linsys
  MainIs:         trsv_tpsv.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable posv_ppsv_pbsv
  Path:           examples/linsys
  MainIs:         posv_ppsv_pbsv.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable perceptron
  Path:           examples/neural-network/perceptron
  MainIs:         perceptron.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable logistic_regression
  Path:           examples/neural-network/logistic-regression
  MainIs:         logistic_regression.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable two_layer_neural_network
  Path:           examples/neural-network/two-layer
  MainIs:         two_layer_neural_network.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable multilayer_neural_network
  Path:           examples/neural-network/multilayer
  MainIs:         multilayer_neural_network.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable qr_lacaml
  Path:           examples/porting/qr_factorize
  MainIs:         qr_lacaml.ml
  Build$:         flag(examples)
  BuildDepends:   lacaml
  Install:        false
  CompiledObject: best

Executable qr_slap
  Path:           examples/porting/qr_factorize
  MainIs:         qr_slap.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable lu_lacaml
  Path:           examples/porting/lu_factorize
  MainIs:         lu_lacaml.ml
  Build$:         flag(examples)
  BuildDepends:   lacaml
  Install:        false
  CompiledObject: best

Executable lu_slap
  Path:           examples/porting/lu_factorize
  MainIs:         lu_slap.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable perceptron_lacaml
  Path:           examples/porting/perceptron
  MainIs:         perceptron_lacaml.ml
  Build$:         flag(examples)
  BuildDepends:   lacaml
  Install:        false
  CompiledObject: best

Executable perceptron_slap
  Path:           examples/porting/perceptron
  MainIs:         perceptron_slap.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable kmeans_lacaml
  Path:           examples/porting/k-means
  MainIs:         kmeans_lacaml.ml
  Build$:         flag(examples)
  BuildDepends:   lacaml
  Install:        false
  CompiledObject: best

Executable kmeans_slap
  Path:           examples/porting/k-means
  MainIs:         kmeans_slap.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable pca_lacaml
  Path:           examples/porting/pca
  MainIs:         pca_lacaml.ml
  Build$:         flag(examples)
  BuildDepends:   lacaml
  Install:        false
  CompiledObject: best

Executable pca_slap
  Path:           examples/porting/pca
  MainIs:         pca_slap.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

SourceRepository head
  Type:           git
  Location:       https://github.com/akabe/slap.git
  Browser:        https://github.com/akabe/slap
