OASISFormat:            0.4
OCamlVersion:           >= 4.02
Name:                   SLAP
Version:                1.0.0
Synopsis:               A linear algebra library with static size checking for
                        matrix operations
Description:            Sized Linear Algebra Package (SLAP) is a wrapper of
                        Lacaml, a binding of two widely used linear algebra
                        libraries BLAS and LAPACK for FORTRAN. This guarantees
                        statically (i.e, at compile time) consistency (with
                        respect to dimensions) of most high-level matrix (and
                        vector) operations. For example, addition of two- and
                        three-dimensional vectors causes type error at compile
                        time, and dynamic errors like exceptions do not happen.
Maintainers:            Akinori ABE <abe@sf.ecei.tohoku.ac.jp>
Authors:                Akinori ABE <abe@sf.ecei.tohoku.ac.jp>
Copyrights:             (C) 2013-2015 Akinori ABE <abe@sf.ecei.tohoku.ac.jp>
License:                LGPL-2.1 with OCaml linking exception
Homepage:               https://github.com/akabe/slap
Plugins:                META (0.4), StdFiles (0.4), DevFiles (0.4)
XStdFilesAUTHORS:       false
XStdFilesREADME:        false
BuildTools:             ocamlbuild,ocamldoc,cppo

PreBuildCommand:        ocaml gen_config.ml; \
                        cppo lib/slap_S.cppo.mli > lib/slap_S.mli; \
                        cppo lib/slap_S.cppo.ml > lib/slap_S.ml; \
                        cppo lib/slap_D.cppo.mli > lib/slap_D.mli; \
                        cppo lib/slap_D.cppo.ml > lib/slap_D.ml; \
                        cppo lib/slap_C.cppo.mli > lib/slap_C.mli; \
                        cppo lib/slap_C.cppo.ml > lib/slap_C.ml; \
                        cppo lib/slap_Z.cppo.mli > lib/slap_Z.mli; \
                        cppo lib/slap_Z.cppo.ml > lib/slap_Z.ml
PostCleanCommand:       rm -f lib/config.h lib/slap_[SDCZ].mli lib/slap_[SDCZ].ml

Flag ppx
  Default:              true
  Description:          Build ppx_slap

Library slap
  Path:                 lib
  FindlibName:          slap
  BuildDepends:         bigarray,lacaml
  Modules:              Slap,
                        Slap_misc,
                        Slap_common,
                        Slap_size,
                        Slap_vec,
                        Slap_mat,
                        Slap_io,
                        Slap_S,
                        Slap_D,
                        Slap_C,
                        Slap_Z
  CSources:             config.h,
                        slap_utils.h, slap_utils.c,
                        slap_vec_stubs.c,
                        slap_mat_stubs.c
  CCOpt:                -g -std=c99 -O2 -fPIC -DPIC
  CCLib:                -lblas -llapack
  # TODO: Mac OS X is untested.
  if system(macosx)
     CCOpt+:            -DEXTERNAL_EXP10
     CCLib+:            -framework Accelerate
  # TODO: MinGW is untested.
  if system(mingw)
     CCOpt+:            -DEXTERNAL_EXP10

Library slap_top
  Path:                 lib
  FindlibName:          top
  FindlibParent:        slap
  Modules:              Install_top
  XMETARequires:        slap
  XMETADescription:     Toplevel module for SLAP.
  BuildDepends:         slap,compiler-libs.toplevel

Library slap_ppx
  Path:                 ppx
  FindlibName:          ppx
  FindlibParent:        slap
  Install$:             flag(ppx)
  Build$:               flag(ppx)
  Modules:              Slap_ppx
  BuildDepends:         slap
  XMETARequires:        slap
  XMETADescription:     Syntactic extensions for SLAP.
  XMETAExtraLines:      ppx = "ppx_slap"

Executable ppx_slap
  Path:                 ppx
  MainIs:               ppx_slap.ml
  Install$:             flag(ppx)
  Build$:               flag(ppx)
  BuildDepends:         compiler-libs.common
  CompiledObject:       best

# Documentation

Document slap
  Title:                SLAP API Documentation
  Type:                 OCamlbuild (0.4)
  BuildTools+:          ocamldoc
  InstallDir:           $docdir/api
  XOCamlbuildPath:      lib
  XOCamlbuildLibraries: slap

# Tests

Executable test_lib
  Path:                 test/lib
  MainIs:               test.ml
  Build$:               flag(tests)
  Install:              false
  BuildDepends:         slap,oUnit
  CompiledObject:       best

Test test_lib
  Run$:                 flag(tests)
  Command:              $test_lib
  WorkingDirectory:     test/lib

Executable test_ppx
  Path:                 test/ppx
  MainIs:               test.ml
  Build$:               flag(tests) && flag(ppx)
  Install:              false
  BuildTools:           ppx_slap
  BuildDepends:         slap,oUnit
  CompiledObject:       best

Test test_ppx
  Run$:                 flag(tests) && flag(ppx)
  Command:              $test_ppx
  WorkingDirectory:     test/ppx

##
## Examples
##

Flag examples
  Description:    Build examples
  Default:        false

Executable gemv_gbmv
  Path:           examples/mult
  MainIs:         gemv_gbmv.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable symv_sbmv
  Path:           examples/mult
  MainIs:         symv_sbmv.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable gesv_gbsv
  Path:           examples/linsys
  MainIs:         gesv_gbsv.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable trsv_tpsv
  Path:           examples/linsys
  MainIs:         trsv_tpsv.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable posv_ppsv_pbsv
  Path:           examples/linsys
  MainIs:         posv_ppsv_pbsv.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable perceptron
  Path:           examples/neural-network/perceptron
  MainIs:         perceptron.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable logistic_regression
  Path:           examples/neural-network/logistic-regression
  MainIs:         logistic_regression.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable two_layer_neural_network
  Path:           examples/neural-network/two-layer
  MainIs:         two_layer_neural_network.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable multilayer_neural_network
  Path:           examples/neural-network/multilayer
  MainIs:         multilayer_neural_network.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable qr_lacaml
  Path:           examples/porting/qr_factorize
  MainIs:         qr_lacaml.ml
  Build$:         flag(examples)
  BuildDepends:   lacaml
  Install:        false
  CompiledObject: best

Executable qr_slap
  Path:           examples/porting/qr_factorize
  MainIs:         qr_slap.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable lu_lacaml
  Path:           examples/porting/lu_factorize
  MainIs:         lu_lacaml.ml
  Build$:         flag(examples)
  BuildDepends:   lacaml
  Install:        false
  CompiledObject: best

Executable lu_slap
  Path:           examples/porting/lu_factorize
  MainIs:         lu_slap.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable perceptron_lacaml
  Path:           examples/porting/perceptron
  MainIs:         perceptron_lacaml.ml
  Build$:         flag(examples)
  BuildDepends:   lacaml
  Install:        false
  CompiledObject: best

Executable perceptron_slap
  Path:           examples/porting/perceptron
  MainIs:         perceptron_slap.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable kmeans_lacaml
  Path:           examples/porting/k-means
  MainIs:         kmeans_lacaml.ml
  Build$:         flag(examples)
  BuildDepends:   lacaml
  Install:        false
  CompiledObject: best

Executable kmeans_slap
  Path:           examples/porting/k-means
  MainIs:         kmeans_slap.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

Executable pca_lacaml
  Path:           examples/porting/pca
  MainIs:         pca_lacaml.ml
  Build$:         flag(examples)
  BuildDepends:   lacaml
  Install:        false
  CompiledObject: best

Executable pca_slap
  Path:           examples/porting/pca
  MainIs:         pca_slap.ml
  Build$:         flag(examples)
  BuildDepends:   slap
  Install:        false
  CompiledObject: best

SourceRepository head
  Type:           git
  Location:       https://github.com/akabe/slap.git
  Browser:        https://github.com/akabe/slap
