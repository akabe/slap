# OASIS_START
# DO NOT EDIT (digest: cb5596e62e377f66342308becba7e0c8)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library slap
"lib/slap.cmxs": use_slap
<lib/*.ml{,i,y}>: oasis_library_slap_ccopt
"lib/slap_utils.c": oasis_library_slap_ccopt
"lib/slap_vec_stubs.c": oasis_library_slap_ccopt
"lib/slap_mat_stubs.c": oasis_library_slap_ccopt
<lib/slap.{cma,cmxa}>: oasis_library_slap_cclib
"lib/libslap_stubs.lib": oasis_library_slap_cclib
"lib/dllslap_stubs.dll": oasis_library_slap_cclib
"lib/libslap_stubs.a": oasis_library_slap_cclib
"lib/dllslap_stubs.so": oasis_library_slap_cclib
<lib/slap.{cma,cmxa}>: use_libslap_stubs
"lib/slap_utils.c": pkg_bigarray
"lib/slap_utils.c": pkg_lacaml
"lib/slap_vec_stubs.c": pkg_bigarray
"lib/slap_vec_stubs.c": pkg_lacaml
"lib/slap_mat_stubs.c": pkg_bigarray
"lib/slap_mat_stubs.c": pkg_lacaml
# Library slap_top
"lib/slap_top.cmxs": use_slap_top
<lib/*.ml{,i,y}>: pkg_bigarray
<lib/*.ml{,i,y}>: pkg_compiler-libs.toplevel
<lib/*.ml{,i,y}>: pkg_lacaml
<lib/*.ml{,i,y}>: use_slap
# Executable test
<test/test.{native,byte}>: pkg_bigarray
<test/test.{native,byte}>: pkg_lacaml
<test/test.{native,byte}>: pkg_oUnit
<test/test.{native,byte}>: use_slap
<test/*.ml{,i,y}>: pkg_bigarray
<test/*.ml{,i,y}>: pkg_lacaml
<test/*.ml{,i,y}>: pkg_oUnit
<test/*.ml{,i,y}>: use_slap
# Executable gemv_gbmv
<examples/mult/gemv_gbmv.{native,byte}>: pkg_bigarray
<examples/mult/gemv_gbmv.{native,byte}>: pkg_lacaml
<examples/mult/gemv_gbmv.{native,byte}>: use_slap
# Executable symv_sbmv
<examples/mult/symv_sbmv.{native,byte}>: pkg_bigarray
<examples/mult/symv_sbmv.{native,byte}>: pkg_lacaml
<examples/mult/symv_sbmv.{native,byte}>: use_slap
<examples/mult/*.ml{,i,y}>: pkg_bigarray
<examples/mult/*.ml{,i,y}>: pkg_lacaml
<examples/mult/*.ml{,i,y}>: use_slap
# Executable jacobi
<examples/linsys/jacobi.{native,byte}>: pkg_bigarray
<examples/linsys/jacobi.{native,byte}>: pkg_lacaml
<examples/linsys/jacobi.{native,byte}>: use_slap
# Executable gesv_gbsv
<examples/linsys/gesv_gbsv.{native,byte}>: pkg_bigarray
<examples/linsys/gesv_gbsv.{native,byte}>: pkg_lacaml
<examples/linsys/gesv_gbsv.{native,byte}>: use_slap
# Executable trsv_tpsv
<examples/linsys/trsv_tpsv.{native,byte}>: pkg_bigarray
<examples/linsys/trsv_tpsv.{native,byte}>: pkg_lacaml
<examples/linsys/trsv_tpsv.{native,byte}>: use_slap
# Executable posv_ppsv_pbsv
<examples/linsys/posv_ppsv_pbsv.{native,byte}>: pkg_bigarray
<examples/linsys/posv_ppsv_pbsv.{native,byte}>: pkg_lacaml
<examples/linsys/posv_ppsv_pbsv.{native,byte}>: use_slap
<examples/linsys/*.ml{,i,y}>: pkg_bigarray
<examples/linsys/*.ml{,i,y}>: pkg_lacaml
<examples/linsys/*.ml{,i,y}>: use_slap
# Executable perceptron
<examples/neural-network/perceptron/perceptron.{native,byte}>: pkg_bigarray
<examples/neural-network/perceptron/perceptron.{native,byte}>: pkg_lacaml
<examples/neural-network/perceptron/perceptron.{native,byte}>: use_slap
<examples/neural-network/perceptron/*.ml{,i,y}>: pkg_bigarray
<examples/neural-network/perceptron/*.ml{,i,y}>: pkg_lacaml
<examples/neural-network/perceptron/*.ml{,i,y}>: use_slap
# Executable logistic_regression
<examples/neural-network/logistic-regression/logistic_regression.{native,byte}>: pkg_bigarray
<examples/neural-network/logistic-regression/logistic_regression.{native,byte}>: pkg_lacaml
<examples/neural-network/logistic-regression/logistic_regression.{native,byte}>: use_slap
<examples/neural-network/logistic-regression/*.ml{,i,y}>: pkg_bigarray
<examples/neural-network/logistic-regression/*.ml{,i,y}>: pkg_lacaml
<examples/neural-network/logistic-regression/*.ml{,i,y}>: use_slap
# Executable two_layer_neural_network
<examples/neural-network/two-layer/two_layer_neural_network.{native,byte}>: pkg_bigarray
<examples/neural-network/two-layer/two_layer_neural_network.{native,byte}>: pkg_lacaml
<examples/neural-network/two-layer/two_layer_neural_network.{native,byte}>: use_slap
<examples/neural-network/two-layer/*.ml{,i,y}>: pkg_bigarray
<examples/neural-network/two-layer/*.ml{,i,y}>: pkg_lacaml
<examples/neural-network/two-layer/*.ml{,i,y}>: use_slap
# Executable qr_lacaml
<examples/porting/qr_factorize/qr_lacaml.{native,byte}>: pkg_lacaml
# Executable qr_slap
<examples/porting/qr_factorize/qr_slap.{native,byte}>: pkg_bigarray
<examples/porting/qr_factorize/qr_slap.{native,byte}>: pkg_lacaml
<examples/porting/qr_factorize/qr_slap.{native,byte}>: use_slap
<examples/porting/qr_factorize/*.ml{,i,y}>: pkg_bigarray
<examples/porting/qr_factorize/*.ml{,i,y}>: pkg_lacaml
<examples/porting/qr_factorize/*.ml{,i,y}>: use_slap
# Executable lu_lacaml
<examples/porting/lu_factorize/lu_lacaml.{native,byte}>: pkg_lacaml
# Executable lu_slap
<examples/porting/lu_factorize/lu_slap.{native,byte}>: pkg_bigarray
<examples/porting/lu_factorize/lu_slap.{native,byte}>: pkg_lacaml
<examples/porting/lu_factorize/lu_slap.{native,byte}>: use_slap
<examples/porting/lu_factorize/*.ml{,i,y}>: pkg_bigarray
<examples/porting/lu_factorize/*.ml{,i,y}>: pkg_lacaml
<examples/porting/lu_factorize/*.ml{,i,y}>: use_slap
# Executable perceptron_lacaml
<examples/porting/perceptron/perceptron_lacaml.{native,byte}>: pkg_lacaml
# Executable perceptron_slap
<examples/porting/perceptron/perceptron_slap.{native,byte}>: pkg_bigarray
<examples/porting/perceptron/perceptron_slap.{native,byte}>: pkg_lacaml
<examples/porting/perceptron/perceptron_slap.{native,byte}>: use_slap
<examples/porting/perceptron/*.ml{,i,y}>: pkg_bigarray
<examples/porting/perceptron/*.ml{,i,y}>: pkg_lacaml
<examples/porting/perceptron/*.ml{,i,y}>: use_slap
# Executable kmeans_lacaml
<examples/porting/k-means/kmeans_lacaml.{native,byte}>: pkg_lacaml
# Executable kmeans_slap
<examples/porting/k-means/kmeans_slap.{native,byte}>: pkg_bigarray
<examples/porting/k-means/kmeans_slap.{native,byte}>: pkg_lacaml
<examples/porting/k-means/kmeans_slap.{native,byte}>: use_slap
<examples/porting/k-means/*.ml{,i,y}>: pkg_bigarray
<examples/porting/k-means/*.ml{,i,y}>: pkg_lacaml
<examples/porting/k-means/*.ml{,i,y}>: use_slap
# Executable pca_lacaml
<examples/porting/pca/pca_lacaml.{native,byte}>: pkg_lacaml
# Executable pca_slap
<examples/porting/pca/pca_slap.{native,byte}>: pkg_bigarray
<examples/porting/pca/pca_slap.{native,byte}>: pkg_lacaml
<examples/porting/pca/pca_slap.{native,byte}>: use_slap
<examples/porting/pca/*.ml{,i,y}>: pkg_bigarray
<examples/porting/pca/*.ml{,i,y}>: pkg_lacaml
<examples/porting/pca/*.ml{,i,y}>: use_slap
# OASIS_STOP
