(* 'gen_config.h' generates 'lib/config.h' *)

#load "str.cma";;

open Format

let output_ocaml_version ppf =
  let version = Sys.ocaml_version in
  let rg = Str.regexp "\\([0-9]+\\)\\.\\([0-9]+\\)\
                       \\(\\.\\([0-9]+\\)\\(.*\\)\\)?"
  in
  if Str.string_match rg version 0
  then
    begin
      let major_version = Str.matched_group 1 version in
      let minor_version = Str.matched_group 2 version in
      let micro_version = try Str.matched_group 4 version
                          with Not_found -> "0" in
      fprintf ppf
              "@./* OCaml version */@.@.\
               #define OCAML_MAJOR %s /* The major version of OCaml */@.\
               #define OCAML_MINOR %s /* The minor version of OCaml */@.\
               #define OCAML_MICRO %s /* The micro version (patchlevel) of OCaml */@."
              major_version
              minor_version
              micro_version
    end
  else
    failwith "Sys.ocaml_version has invalid format"

let () =
  printf "Generating lib/config.h... ";
  let oc = open_out "lib/config.h" in
  let ppf = formatter_of_out_channel oc in
  fprintf ppf "/* `lib/config.h' is automatically generated by `gen_config.ml' */@.";
  try
    output_ocaml_version ppf;
    close_out oc;
    printf "ok@.";
  with
    Failure msg ->
    close_out oc;
    printf "[Error] %s@." msg
